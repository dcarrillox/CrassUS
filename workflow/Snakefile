include: "rules/common.smk"


rule all:
    input:
        # "results/2_profiles_scan/matching_contigs.txt",
        # "results/merged.txt",
        aggregate_best_codings,
        # "results/4_prodigal/coding_summary.txt",
        # "results/6_clustering/clustering.tsv",
        # "results/6_clustering/shared_content_matrix.txt",
        # "results/6_terl_tree/terl_tree.nwk",
        # "results/taxonomic_classification.txt"
        # expand("results/1_assembly/1_scaff20k/{sample}.fasta",
        #         sample=sample_sheet.index.tolist())




include: "rules/assembly.smk"
include: "rules/scan_contigs.smk"
include: "rules/open_reading_frames.smk"
include: "rules/terl_tree.smk"
include: "rules/protein_clustering.smk"

rule blastn:
    input:
        "results/3_contigs/0_contigs/{contig}.fasta",
    output:
        "results/5_blast/{contig}.blast"
    threads: 4
    container: "library://dcarrillo/default/crassus:0.1"
    shell:
        "blastn -num_threads {threads} -dust no -soft_masking false "
        "-db /data/genomes/all_genomes -out {output} -query {input} "
        "-xdrop_gap_final 150 -evalue 1e-15 -max_target_seqs 1 -task blastn "
        "-outfmt '6 qseqid sseqid length mismatch pident nident qlen slen qstart qend sstart send positive ppos gaps'"

rule fastani:
    input:
        "results/3_contigs/0_contigs/{contig}.fasta",
    output:
        "results/6_fastani/{contig}.fastani"
    threads: 2
    container: "library://dcarrillo/default/crassus:0.1"
    log:
        "results/6_fastani/{contig}.log"
    shell:
        "/software/fastANI -q {input} --rl /data/genomes/genomes_reflist.txt -k 13 --fragLen 1000 "
        "--minFraction 0.1 -t {threads} -o {output} &> {log}"

checkpoint pyani:
    input:
        #fasta = "results/3_contigs/0_contigs/{contig}.fasta",
        #ani   = "results/6_fastani/{contig}.fastani"
        ani = rules.fastani.output
    output:
        done = "results/7_pyani/{contig}/.done"
    params:
        outdir = "results/7_pyani/{contig}",
        tmp = directory("results/7_pyani/{contig}_tmp")
    container: "library://dcarrillo/default/crassus:0.1"
    threads: 4
    log:
        "results/7_pyani/{contig}/{contig}.log"
    script:
        "../scripts/run_pyani.py"



rule obtain_taxonomy:
    input:
        terl_tree = rules.fasttree_terl.output,
        shared_c  = rules.calculate_shared_prots.output.shared,
        found_contigs = expand("results/3_contigs/0_contigs/{contig}.fasta",
                                contig=glob_wildcards("results/3_contigs/0_contigs/{contig}.fasta").contig,
                              )
    output:
        "results/taxonomic_classification.txt"
    params:
        taxonomy = "resources/terL/crass_taxonomy.txt"
    #container: "library://dcarrillo/default/crassus:0.1"
    conda: "../envs/ete3_env.yaml"
    script: "../scripts/final_taxonomic_classification.py"




rule merge_test:
    input:
        aggregate_contigs
    output:
        "results/merged.txt"
    shell:
        """
        ls {input} > {output}
        """


#######
# xmatchview
#######

'''
1) Download .tar with the release, contains test data
2) Clone the repository too, it contains the .ttf files
3)

NOP, it is not editable enough. I need to color the ORFs for instance.
'''

### TerL MSA ###
# MAFFT can add a sequence(s) to an existing MSA via the --add option
# https://mafft.cbrc.jp/alignment/software/addsequences.html
# So, two options here:
#   1) Using only the type strains terminases (~280), MAFFT should be quick with this,
#      we already did this in CoCalc COOIII.
#   2) Using all the classified contigs (~860), not sure how quick MAFFT would be
#      After my meeting with Bas (26/08/2021), I go with this option not only for the
#      TerL tree but for the whole reference of genomes and proteins.


########
# genoplotR (R package)
########

########
# split heatmap
########
# https://stackoverflow.com/questions/63530701/python-package-to-plot-two-heatmaps-in-one-split-each-square-into-two-triangles
#

########
# pyani cmd
########
# blastn -out results/7_pyani/F_434_103281/blastn_output/F_434_103281_vs_Rampelli_10024_NODE_19_length_105296_cov_11.084995.blast_tab
# -query results/7_pyani/F_434_103281/blastn_output/F_434_103281-fragments.fasta
# -db results/7_pyani/F_434_103281/blastn_output/Rampelli_10024_NODE_19_length_105296_cov_11.084995.fasta
# -xdrop_gap_final 150 -dust no -evalue 1e-15 -max_target_seqs 1
# -outfmt '6 qseqid sseqid length mismatch pident nident qlen slen qstart qend sstart send positive ppos gaps' -task blastn


'''
~ SINGULARITY CONTAINER ~

1) Create a env.yml file for the conda env that will be create in the container
$ mamba create -c conda-forge -c bioconda -n container blast=2.11 biopython=1.77 python=3.9 hmmer seaborn matplotlib pandas numpy pyani mmseqs2
$ conda env export --name container > container.yml

2) Write definition file and build
$ sudo /home/dani/miniconda3/bin/singularity build container.sif container.def

3) upload to the library
$ singularity sign container.sif  #singul1243
$ singularity push container.sif library://dcarrillo/default/crassus:0.1
'''
